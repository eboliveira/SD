package Exercicio2;/** * TCPServer: Servidor para conexao TCP com Threads Descricao: Recebe uma * conexao, cria uma thread, recebe uma mensagem e finaliza a conexao */import java.net.*;import java.io.*;import java.util.ArrayList;public class TCPServer {    public static void main(String args[]) {        try {            ArrayList<ClientThread> clients = new ArrayList<ClientThread>();            int serverPort = 6666; // porta do servidor            /* cria um socket e mapeia a porta para aguardar conexao */            ServerSocket listenSocket = new ServerSocket(serverPort);            while (true) {                System.out.println("Servidor aguardando conexao ...");                /* aguarda conexoes */                Socket clientSocket = listenSocket.accept();                System.out.println("Cliente conectado ... Criando thread ...");                /* cria um thread para atender a conexao */                ClientThread c = new ClientThread(clientSocket, clients);                /* inicializa a thread */                c.start();            } //while        } catch (IOException e) {            System.out.println("Listen socket:" + e.getMessage());        } //catch    } //main} //class/** * Classe ClientThread: Thread responsavel pela comunicacao * Descricao: Rebebe um socket, cria os objetos de leitura e escrita, * aguarda msgs clientes e responde com a msg + :OK */class ClientThread extends Thread {    DataInputStream in;    DataOutputStream out;    Socket clientSocket;    ArrayList<ClientThread> clients;    public ClientThread(Socket clientSocket, ArrayList<ClientThread> clients) {        try {            this.clientSocket = clientSocket;            in = new DataInputStream(clientSocket.getInputStream());            out = new DataOutputStream(clientSocket.getOutputStream());            clients.add(this);            this.clients = clients;        } catch (IOException ioe) {            System.out.println("Connection:" + ioe.getMessage());        } //catch    } //construtor    /* metodo executado ao iniciar a thread - start() */    @Override    public void run() {        try {            String buffer = "";            while (true) {                buffer = in.readUTF();   /* aguarda o envio de dados */                for(ClientThread clientItem : clients){                    try{                        clientItem.out.writeUTF(buffer);                    }catch(Exception e){                        clientItem.in.close();                        clientItem.out.close();                        clientItem.clientSocket.close();                        clients.remove(clientItem);                    }                }            }        } catch (EOFException eofe) {            System.out.println("EOF: " + eofe.getMessage());        } catch (IOException ioe) {        }        System.out.println("Thread comunicação cliente finalizada.");    } //run} //class